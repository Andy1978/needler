diff --git a/Makefile b/Makefile
index f0e7f41..d0aa713 100644
--- a/Makefile
+++ b/Makefile
@@ -28,20 +28,21 @@
 #                is connected.
 # FUSES ........ Parameters for avrdude to flash the fuses appropriately.
 
-DEVICE     ?= atmega328p
+DEVICE     = atmega328p
 CLOCK      = 16000000
-PROGRAMMER ?= -c avrisp2 -P usb
+PROGRAMMER = -P usb -c usbasp
 OBJECTS    = main.o motion_control.o gcode.o spindle_control.o coolant_control.o serial.o \
              protocol.o stepper.o eeprom.o settings.o planner.o nuts_bolts.o limits.o \
              print.o report.o
 # FUSES      = -U hfuse:w:0xd9:m -U lfuse:w:0x24:m
-FUSES      = -U hfuse:w:0xd2:m -U lfuse:w:0xff:m
+#FUSES      = -U hfuse:w:0xd2:m -U lfuse:w:0xff:m
 # update that line with this when programmer is back up:
-# FUSES      = -U hfuse:w:0xd7:m -U lfuse:w:0xff:m
+FUSES      = -U hfuse:w:0xd7:m -U lfuse:w:0xff:m
 
 # Tune the lines below only if you know what you are doing:
 
-AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE) -B 10 -F
+#AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE) -B 10 -F
+AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE) -F
 COMPILE = avr-gcc -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE) -I. -ffunction-sections
 
 # symbolic targets:
diff --git a/config.h b/config.h
index aa427e7..60f0cfc 100644
--- a/config.h
+++ b/config.h
@@ -57,7 +57,7 @@
 #define Y_LIMIT_BIT     2  // Uno Digital Pin 10
 #define Z_LIMIT_BIT     3  // Uno Digital Pin 11
 #define LIMIT_INT       PCIE0  // Pin change interrupt enable pin
-#define LIMIT_INT_vect  PCINT0_vect 
+#define LIMIT_INT_vect  PCINT0_vect
 #define LIMIT_PCMSK     PCMSK0 // Pin change interrupt register
 #define LIMIT_MASK ((1<<X_LIMIT_BIT)|(1<<Y_LIMIT_BIT)|(1<<Z_LIMIT_BIT)) // All limit bits
 
@@ -80,7 +80,7 @@
   #define COOLANT_MIST_DDR   DDRC
   #define COOLANT_MIST_PORT  PORTC
   #define COOLANT_MIST_BIT   4 // Uno Analog Pin 4
-#endif  
+#endif
 
 // NOTE: All pinouts pins must be on the same port
 #define PINOUT_DDR       DDRC
@@ -96,8 +96,8 @@
 
 // Define runtime command special characters. These characters are 'picked-off' directly from the
 // serial read data stream and are not passed to the grbl line execution parser. Select characters
-// that do not and must not exist in the streamed g-code program. ASCII control characters may be 
-// used, if they are available per user setup. Also, extended ASCII codes (>127), which are never in 
+// that do not and must not exist in the streamed g-code program. ASCII control characters may be
+// used, if they are available per user setup. Also, extended ASCII codes (>127), which are never in
 // g-code programs, maybe selected for interface programs.
 // NOTE: If changed, manually update help message in report.c.
 #define CMD_STATUS_REPORT '?'
@@ -107,10 +107,10 @@
 
 // The temporal resolution of the acceleration management subsystem. Higher number give smoother
 // acceleration but may impact performance.
-// NOTE: Increasing this parameter will help any resolution related issues, especially with machines 
-// requiring very high accelerations and/or very fast feedrates. In general, this will reduce the 
+// NOTE: Increasing this parameter will help any resolution related issues, especially with machines
+// requiring very high accelerations and/or very fast feedrates. In general, this will reduce the
 // error between how the planner plans the motions and how the stepper program actually performs them.
-// However, at some point, the resolution can be high enough, where the errors related to numerical 
+// However, at some point, the resolution can be high enough, where the errors related to numerical
 // round-off can be great enough to cause problems and/or it's too fast for the Arduino. The correct
 // value for this parameter is machine dependent, so it's advised to set this only as high as needed.
 // Approximate successful values can range from 30L to 100L or more.
@@ -129,15 +129,15 @@
 
 // Time delay increments performed during a dwell. The default value is set at 50ms, which provides
 // a maximum time delay of roughly 55 minutes, more than enough for most any application. Increasing
-// this delay will increase the maximum dwell time linearly, but also reduces the responsiveness of 
-// run-time command executions, like status reports, since these are performed between each dwell 
+// this delay will increase the maximum dwell time linearly, but also reduces the responsiveness of
+// run-time command executions, like status reports, since these are performed between each dwell
 // time step. Also, keep in mind that the Arduino delay timer is not very accurate for long delays.
 #define DWELL_TIME_STEP 50 // Integer (1-255) (milliseconds)
 
 // If homing is enabled, homing init lock sets Grbl into an alarm state upon power up. This forces
 // the user to perform the homing cycle (or override the locks) before doing anything else. This is
 // mainly a safety feature to remind the user to home, since position is unknown to Grbl.
-#define HOMING_INIT_LOCK // Comment to disable
+//#define HOMING_INIT_LOCK // Comment to disable
 
 // The homing cycle seek and feed rates will adjust so all axes independently move at the homing
 // seek and feed rates regardless of how many axes are in motion simultaneously. If disabled, rates
@@ -147,21 +147,23 @@
 #define HOMING_RATE_ADJUST // Comment to disable
 
 // Define the homing cycle search patterns with bitmasks. The homing cycle first performs a search
-// to engage the limit switches. HOMING_SEARCH_CYCLE_x are executed in order starting with suffix 0 
-// and searches the enabled axes in the bitmask. This allows for users with non-standard cartesian 
-// machines, such as a lathe (x then z), to configure the homing cycle behavior to their needs. 
+// to engage the limit switches. HOMING_SEARCH_CYCLE_x are executed in order starting with suffix 0
+// and searches the enabled axes in the bitmask. This allows for users with non-standard cartesian
+// machines, such as a lathe (x then z), to configure the homing cycle behavior to their needs.
 // Search cycle 0 is required, but cycles 1 and 2 are both optional and may be commented to disable.
 // After the search cycle, homing then performs a series of locating about the limit switches to hone
 // in on machine zero, followed by a pull-off maneuver. HOMING_LOCATE_CYCLE governs these final moves,
 // and this mask must contain all axes in the search.
 // NOTE: Later versions may have this installed in settings.
-#define HOMING_SEARCH_CYCLE_0 (1<<Z_AXIS)                // First move Z to clear workspace.
-#define HOMING_SEARCH_CYCLE_1 ((1<<X_AXIS)|(1<<Y_AXIS))  // Then move X,Y at the same time.
+//#define HOMING_SEARCH_CYCLE_0 (1<<Z_AXIS)                // First move Z to clear workspace.
+//#define HOMING_SEARCH_CYCLE_1 ((1<<X_AXIS)|(1<<Y_AXIS))  // Then move X,Y at the same time.
+#define HOMING_SEARCH_CYCLE_0 ((1<<X_AXIS)|(1<<Y_AXIS))  // Then move X,Y at the same time.
 // #define HOMING_SEARCH_CYCLE_2                         // Uncomment and add axes mask to enable
-#define HOMING_LOCATE_CYCLE   ((1<<X_AXIS)|(1<<Y_AXIS)|(1<<Z_AXIS)) // Must contain ALL search axes
+//#define HOMING_LOCATE_CYCLE   ((1<<X_AXIS)|(1<<Y_AXIS)|(1<<Z_AXIS)) // Must contain ALL search axes
+#define HOMING_LOCATE_CYCLE   ((1<<X_AXIS)|(1<<Y_AXIS)) // Andy: Nur x und y
 
 // Number of homing cycles performed after when the machine initially jogs to limit switches.
-// This help in preventing overshoot and should improve repeatability. This value should be one or 
+// This help in preventing overshoot and should improve repeatability. This value should be one or
 // greater.
 #define N_HOMING_LOCATE_CYCLE 2 // Integer (1-128)
 
@@ -172,38 +174,38 @@
 #define N_STARTUP_LINE 2 // Integer (1-5)
 
 // ---------------------------------------------------------------------------------------
-// FOR ADVANCED USERS ONLY: 
+// FOR ADVANCED USERS ONLY:
 
 // The number of linear motions in the planner buffer to be planned at any give time. The vast
-// majority of RAM that Grbl uses is based on this buffer size. Only increase if there is extra 
+// majority of RAM that Grbl uses is based on this buffer size. Only increase if there is extra
 // available RAM, like when re-compiling for a Teensy or Sanguino. Or decrease if the Arduino
 // begins to crash due to the lack of available RAM or if the CPU is having trouble keeping
-// up with planning new incoming motions as they are executed. 
+// up with planning new incoming motions as they are executed.
 // #define BLOCK_BUFFER_SIZE 18  // Uncomment to override default in planner.h.
 
-// Line buffer size from the serial input stream to be executed. Also, governs the size of 
+// Line buffer size from the serial input stream to be executed. Also, governs the size of
 // each of the startup blocks, as they are each stored as a string of this size. Make sure
 // to account for the available EEPROM at the defined memory address in settings.h and for
 // the number of desired startup blocks.
-// NOTE: 70 characters is not a problem except for extreme cases, but the line buffer size 
-// can be too small and g-code blocks can get truncated. Officially, the g-code standards 
-// support up to 256 characters. In future versions, this default will be increased, when 
+// NOTE: 70 characters is not a problem except for extreme cases, but the line buffer size
+// can be too small and g-code blocks can get truncated. Officially, the g-code standards
+// support up to 256 characters. In future versions, this default will be increased, when
 // we know how much extra memory space we can re-invest into this.
 // #define LINE_BUFFER_SIZE 70  // Uncomment to override default in protocol.h
-  
+
 // Serial send and receive buffer size. The receive buffer is often used as another streaming
 // buffer to store incoming blocks to be processed by Grbl when its ready. Most streaming
-// interfaces will character count and track each block send to each block response. So, 
+// interfaces will character count and track each block send to each block response. So,
 // increase the receive buffer if a deeper receive buffer is needed for streaming and avaiable
 // memory allows. The send buffer primarily handles messages in Grbl. Only increase if large
 // messages are sent and Grbl begins to stall, waiting to send the rest of the message.
 // #define RX_BUFFER_SIZE 128 // Uncomment to override defaults in serial.h
 // #define TX_BUFFER_SIZE 64
-  
+
 // Toggles XON/XOFF software flow control for serial communications. Not officially supported
 // due to problems involving the Atmega8U2 USB-to-serial chips on current Arduinos. The firmware
-// on these chips do not support XON/XOFF flow control characters and the intermediate buffer 
-// in the chips cause latency and overflow problems with standard terminal programs. However, 
+// on these chips do not support XON/XOFF flow control characters and the intermediate buffer
+// in the chips cause latency and overflow problems with standard terminal programs. However,
 // using specifically-programmed UI's to manage this latency problem has been confirmed to work.
 // As well as, older FTDI FT232RL-based Arduinos(Duemilanove) are known to work with standard
 // terminal programs since their firmware correctly manage these XON/XOFF characters. In any
@@ -211,15 +213,15 @@
 // #define ENABLE_XONXOFF // Default disabled. Uncomment to enable.
 
 // Creates a delay between the direction pin setting and corresponding step pulse by creating
-// another interrupt (Timer2 compare) to manage it. The main Grbl interrupt (Timer1 compare) 
-// sets the direction pins, and does not immediately set the stepper pins, as it would in 
-// normal operation. The Timer2 compare fires next to set the stepper pins after the step 
-// pulse delay time, and Timer2 overflow will complete the step pulse, except now delayed 
+// another interrupt (Timer2 compare) to manage it. The main Grbl interrupt (Timer1 compare)
+// sets the direction pins, and does not immediately set the stepper pins, as it would in
+// normal operation. The Timer2 compare fires next to set the stepper pins after the step
+// pulse delay time, and Timer2 overflow will complete the step pulse, except now delayed
 // by the step pulse time plus the step pulse delay. (Thanks langwadt for the idea!)
 //   This is an experimental feature that should only be used if your setup requires a longer
 // delay between direction and step pin settings (some opto coupler based drivers), as it may
-// adversely effect Grbl's high-end performance (>10kHz). Please notify Grbl administrators 
-// of your successes or difficulties, as we will monitor this and possibly integrate this as a 
+// adversely effect Grbl's high-end performance (>10kHz). Please notify Grbl administrators
+// of your successes or difficulties, as we will monitor this and possibly integrate this as a
 // standard feature for future releases. However, we suggest to first try our direction delay
 // hack/solution posted in the Wiki involving inverting the stepper pin mask.
 // NOTE: Uncomment to enable. The recommended delay must be > 3us and the total step pulse
diff --git a/defaults.h b/defaults.h
index 30e575d..206ddd5 100644
--- a/defaults.h
+++ b/defaults.h
@@ -29,27 +29,27 @@
 
 #ifdef DEFAULTS_GENERIC
   // Grbl generic default settings. Should work across different machines.
-  #define DEFAULT_X_STEPS_PER_MM 250.0
-  #define DEFAULT_Y_STEPS_PER_MM 250.0
-  #define DEFAULT_Z_STEPS_PER_MM 250.0
-  #define DEFAULT_STEP_PULSE_MICROSECONDS 10
+  #define DEFAULT_X_STEPS_PER_MM 28.294
+  #define DEFAULT_Y_STEPS_PER_MM 28.294
+  #define DEFAULT_Z_STEPS_PER_MM 10.0
+  #define DEFAULT_STEP_PULSE_MICROSECONDS 30
   #define DEFAULT_MM_PER_ARC_SEGMENT 0.1
-  #define DEFAULT_RAPID_FEEDRATE 500.0 // mm/min
-  #define DEFAULT_FEEDRATE 250.0
-  #define DEFAULT_ACCELERATION (10.0*60*60) // 10 mm/min^2
+  #define DEFAULT_RAPID_FEEDRATE 10000.0 // mm/min
+  #define DEFAULT_FEEDRATE 3000.0
+  #define DEFAULT_ACCELERATION (300.0*60*60) // 300mm/sec^2
   #define DEFAULT_JUNCTION_DEVIATION 0.05 // mm
-  #define DEFAULT_STEPPING_INVERT_MASK ((1<<Y_DIRECTION_BIT)|(1<<Z_DIRECTION_BIT))
+  #define DEFAULT_STEPPING_INVERT_MASK 96
   #define DEFAULT_REPORT_INCHES 0 // false
   #define DEFAULT_AUTO_START 1 // true
   #define DEFAULT_INVERT_ST_ENABLE 0 // false
   #define DEFAULT_HARD_LIMIT_ENABLE 0  // false
-  #define DEFAULT_HOMING_ENABLE 0  // false
-  #define DEFAULT_HOMING_DIR_MASK 0 // move positive dir
-  #define DEFAULT_HOMING_RAPID_FEEDRATE 250.0 // mm/min
-  #define DEFAULT_HOMING_FEEDRATE 25.0 // mm/min
+  #define DEFAULT_HOMING_ENABLE 1  // false
+  #define DEFAULT_HOMING_DIR_MASK 96
+  #define DEFAULT_HOMING_RAPID_FEEDRATE 2000.0 // mm/min
+  #define DEFAULT_HOMING_FEEDRATE 300.0 // mm/min
   #define DEFAULT_HOMING_DEBOUNCE_DELAY 100 // msec (0-65k)
   #define DEFAULT_HOMING_PULLOFF 1.0 // mm
-  #define DEFAULT_STEPPER_IDLE_LOCK_TIME 25 // msec (0-255)
+  #define DEFAULT_STEPPER_IDLE_LOCK_TIME 30 // msec (0-255)
   #define DEFAULT_DECIMAL_PLACES 3
   #define DEFAULT_N_ARC_CORRECTION 25
 #endif
@@ -151,4 +151,4 @@
   #define DEFAULT_N_ARC_CORRECTION 25
 #endif
 
-#endif
\ No newline at end of file
+#endif
diff --git a/settings.c b/settings.c
index dc8c09e..a839bda 100644
--- a/settings.c
+++ b/settings.c
@@ -204,11 +204,13 @@ uint8_t settings_store_global_setting(int parameter, float value) {
 
 // Initialize the config subsystem
 void settings_init() {
-  if(!read_global_settings()) {
-    report_status_message(STATUS_SETTING_READ_FAIL);
-    settings_reset(true);
-    report_grbl_settings();
-  }
+  //Von Andy: Nicht aus dem EEPROM lesen, immer defaults.h verwenden
+  //~ if(!read_global_settings()) {
+    //~ report_status_message(STATUS_SETTING_READ_FAIL);
+    //~ settings_reset(true);
+    //~ report_grbl_settings();
+  //~ }
+  settings_reset(true);
   // Read all parameter data into a dummy variable. If error, reset to zero, otherwise do nothing.
   float coord_data[N_AXIS];
   uint8_t i;
